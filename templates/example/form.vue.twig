{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        pre {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 10px;
            margin: 10px;
        }
    </style>
{% endblock %}

{% block body %}
    <h1>
        Form example
    </h1>
    <p>
        With the <code>vue-form</code> and <code>form-widget</code> components you can take control over your form,
        similar to twig, but with the extra benefits of vue.
    </p>
    <p>
        It's quite powerful, but also a bit complex, because you need to wrap your head around how things are intertwined.
        It may be a bit daunting, especially when you run into problems, but once you master these things you can do
        all kinds of things, often in a short amount of time.
    </p>

    {{ vue_data('form', exampleForm) }}


    <vue-form :form="form" v-slot="{ children }">
        <v-row>
            <v-col cols="4">
                <text-type :form="children.name">
                    <template v-slot:counter="{ props }">count = @{ props.value } / @{ props.max }</template>
                </text-type>
                <form-widget :form="children.amount" :disabled="!!children.checkbox.vars.data"></form-widget>
            </v-col>
            <v-col>
                <form-widget :form="children.collection">
                    <template v-slot:tab-text="{ key }">
                        Text @{ key + 1 }
                    </template>
                </form-widget>
            </v-col>
        </v-row>

        <h2>
            DateTimeType fields
        </h2>
        <v-row>
            <v-col>
                <p>
                    A DateTimeType consist of a 'DateType' and 'TimeType' subform.
                </p>

                {{ vue_data('dateTimeFieldAsRow', false) }}
                <form-widget :form="children.dateTimeField" :row="dateTimeFieldAsRow"></form-widget>

                <p>
                    By default, all fields are rendered below each-other, but by setting <code>row</code> on the widget
                    flex-behaviour is used.<br />
                    <v-btn @click="dateTimeFieldAsRow = !dateTimeFieldAsRow">Set row attribute</v-btn>
                </p>
            </v-col>
            <v-col>

                <p>
                    You can render fields of subforms individually, to add a different label or rules for example.
                    It is recommended to keep it wrapped inside the <code>form-widget</code> of the parent.
                </p>

                <form-widget :form="children.dateTimeField" row force-render label="Time & Date" v-slot="{ date, time }">
                    <form-widget type="text" :form="time" label="Time" hint="hours:minutes (e.g. 23:59)" persistent-hint class="col" :rules="timeRules"></form-widget>
                    <form-widget :form="date" class="col"></form-widget>
                </form-widget>
            </v-col>
        </v-row>

        <h2>Select fields</h2>
        <v-row>
            <v-col>
                <form-widget :form="children.checkboxChoice"></form-widget>
            </v-col>
            <v-col>
                <form-widget :form="children.checkbox"></form-widget>
                <form-widget :form="children.toggle" color="error"></form-widget>
                <form-widget :form="children.radioChoice"></form-widget>
            </v-col>
            <v-col>
                <form-widget :form="children.select"></form-widget>
                <form-widget :form="children.selectAllowAdd"></form-widget>
                <form-widget :form="children.multiple"></form-widget>
            </v-col>
        </v-row>
        <form-widget v-for="child of children" :form="child" :label="null"></form-widget><!-- render remainder -->
    </vue-form>
{% endblock %}

{% block script %}
    <script>
        vue = {
            data: () => ({
                timeRules: [
                    value => {
                        const pattern = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
                        return pattern.test(value) || 'Invalid time. Please provide a time in HH:ii format (eg 23:59)'
                    },
                ],
            }),
        }
    </script>
{% endblock %}
