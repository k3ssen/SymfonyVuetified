{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        pre {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 10px;
            margin: 10px;
        }
    </style>
{% endblock %}

{% block body %}
    <h1>
        Form
    </h1>
    <p>
        To keep the project-skeleton lean (and hopefully a little future-proof), no classes for forms and controllers
        are included.
        You can see an example by first creating an entity and crud. Before doing so, make sure
        you have correctly set <code>DATABASE_URL</code> in your <code>.env.local</code> file.
        After that, run the following commands:
    </p>
    <ul>
        <li>
            <code>php bin/console make:entity Product</code><br />
            For example, add the properties 'name' (string) and 'amount' (integer)
        </li>
        <li>
            <code>php bin/console doctrine:schema:update --force</code> (or use migrations if you intend to keep this product)
        </li>
        <li>
            <code>php bin/console make:crud Product</code>
        </li>
    </ul>
    <p class="mt-4">
        You should now be able to visit the url <code>/product/new</code> and see a form without style. This is just the html-form created
        by symfony, but you can edit it by going to the <code>template/products/_form.html.twig</code> file. You should
        see something like the following:
    </p>
<pre v-pre>
{{ '
{{ form_start(form) }}
    {{ form_widget(form) }}
    &lt;button class="btn">{{ button_label|default(\'Save\') }}&lt;/button>
{{ form_end(form) }}
' }}</pre>
    <p>
        Instead of rendering the form by twig, let's replace it with the code below:
    </p>
<pre v-pre>
{{ '
{{ vue_data(\'form\', form) }}
&lt;v-form method="post">
    &lt;form-type :form="form">&lt;/form-type>
    &lt;v-btn type="submit">Submit&lt;/v-btn>
&lt;/v-form>
' }}</pre>
    <p>
        You'll see the form with vuetify styling. If you're missing the labels, that's because the <code>ProductType</code>
        class has not labels set yet. Add labels there and you'll see them added in the view as well.
    </p>

    <p>
        Just like twig-rendering, you can render specific fields. Moreover, the form values are now mapped as v-models,
        so you can use the form in your vue conditions.
    </p>
<pre v-pre>
{{ '
{{ vue_data(\'form\', form) }}
&lt;v-form method="post">
    &lt;v-row>
        &lt;v-col>
            <form-type :form="form.children.name">&lt;/form-type>
        &lt;/v-col>
        &lt;v-col>
            &lt;form-type :form="form.children.amount">&lt;/form-type>
        &lt;/v-col>
    &lt;/v-row>
    &lt;v-alert v-if="form.children.amount.vars.data && form.children.amount.vars.data < 10" type="warning">
        The amount must be 10 or more.
    &lt;/v-alert>
    &lt;v-btn type="submit" :disabled="form.children.amount.vars.data < 10">Submit&lt;/v-btn>

    &lt;form-type :form="form">&lt;/form-type> {# make sure to render the remainder of the form (e.g. field for csrf) #}
&lt;/v-form>
' }}</pre>

{% endblock %}