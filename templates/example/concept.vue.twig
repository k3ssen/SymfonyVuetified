{% extends 'base.vue.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        pre {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 10px;
            margin: 10px;
        }
    </style>
{% endblock %}

{% block body %}

    <h1>Basics</h1>

    <p>
        Looking at the <a href="https://vuejs.org/v2/guide/" target="_blank">Vue guide</a>,
        creating a vue instance would look something like below:
    </p>

<pre v-pre>
    &lt;div id="app">
      {{ '{{ message }}' }}
    &lt;/div>
    &lt;script>
        new Vue({
            el: '#app',
            data: {
                message: 'Hello Vue!'
            }
        })
    &lt;/script>
</pre>
    <p>
        If we're doing this in twig we cannot use the same delimiters, so {{ '{{' }} must be replaced. We
        can use different delimiters for vue, for example by adding
        <code v-pre>delimiters: ['@{', '}'],</code> to the vue object.
    </p>
    <p>
        <strong>Important:</strong>
        You can specify different delimiters if you want, but avoid using
        <a href="https://symfony.com/doc/current/frontend/encore/vuejs.html#using-vue-inside-twig-templates" target="_blank">
            Symfony's example
        </a>
        that uses <code>{{ '${' }}</code>. While that may work fine in most use cases, if you're going to construct dynamic
        components by placing the contents in the template property of a vue object, then the <code>{{ '${' }}</code> will be treated
        as parameter, causing unwanted behaviour.
    </p>
    <p>
        Instead of creating the vue instance directly, we can create an object first.
        The benefit of doing so, is that we can do modifications before creating the instance.
        In <code>app-vue.js</code> we check if the (global) object is available and then use it to merge with some standard
        properties, like the delimiters and element we want to use.
    </p>
<pre v-pre>
    &lt;div id="app">
      {{ '@{ message }}' }}
    &lt;/div>
    &lt;script>
        vue = {
            data: {
                message: 'Hello Vue!'
            }
        }
    &lt;/script>
</pre>
    <p>
        Because the object can be modified before creating the instance, we can take benefit of this by merging server
        side data with this object.
        In <code>app-base.vue.twig</code> you'll find that extra <code>vueData</code> and <code>vueStoreData</code>
        objects are created. These are used in <code>app-vue.js</code>.
    </p>

    <p>
        By extending <code>base.vue.twig</code> the basic handling for the vue instance is taken care of.
        Using certain components doesn't require any special code:
    </p>

<pre v-pre>
{{ '{% extends \'base.vue.twig\' %}' }}
{{ '{% block body %}' }}
    &lt;v-row>
        &lt;v-col>
            Column A
        &lt;/v-col>
        &lt;v-col>
            Column B
        &lt;/v-col>
    &lt;/v-row>
{{ '{% endblock %}' }}
</pre>
{% endblock %}

{% block script %}
    <script>
        vue = {
            data: () => ({
                seconds: 0,
            }),
            mounted() {
                setInterval(() => { this.seconds++; }, 1000);
            },
            computed: {
                currentTimeString() {
                    const date = new Date();
                    date.setSeconds(date.getSeconds() + 10);
                    return date.toLocaleTimeString();
                }
            }
        };
    </script>
{% endblock %}